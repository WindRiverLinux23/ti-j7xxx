			TI J721E EVM Board


1. About this document
======================
This document describes the common and non-hardware specific information.
Please refer to README.hardware for hardware specific information.

Dependencies
------------
This layer depends on the oe-core version supplied with Wind River Linux
and the wr-kernel layer.


Maintenance
-----------
This layer is maintained by Wind River Systems, Inc.
Contact <support@windriver.com> or your support representative for more
information on submitting changes.


Building the ti-j72xx layer
----------------------------
This layer and wr-kernel layer should be added to bblayers.conf. This
is done automatically when using the Wind River configure wrapper.

Note:
To build wrlinux for TI J721E EVM  board, use:

	--machines ti-j72xx

License
-------
Copyright (C) 2020 Wind River Systems, Inc.

Source code included in the tree for individual recipes is under the LICENSE
stated in the associated recipe (.bb file) unless otherwise stated.

The metadata is under the following license unless otherwise stated.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

2. BSP Kernel and Distros
=========================

The following table summarizes the valid Wind River Linux distros for this BSP.
'Y' in each content cell stands for supported; 'N' stands for not supported:

  +--------------+-------------+------------------+
  | valid/distro |   wrlinux   | wrlinux-graphics |
  +--------------+-------------+------------------+
  |    valid     |      Y      |        Y         |
  +--------------+-------------+------------------+

For the supported kernel type for this BSP, please check the TARGET_SUPPORTED_KTYPES
by running 'bitbake -e virtual/kernel | grep "^TARGET_SUPPORTED_KTYPES="'.

Note: The preempt-rt ktype is available for this BSP/Machine at this time.


3. Board Specific Patches
=========================

To get a list of patches applied to the kernel specific to this BSP along with
patch descriptions use git-whatchanged on the default kernel. For example:

	%> cd tmp-glibc/work-shared/<bsp_name>/kernel-source
	%> git whatchanged <kernel_version>/standard/base..<kernel_version>/standard/<bsp_name>


4. Boot Instructions
====================

The typical u-boot settings apply to these boards. You will need to use
setenv, printenv and saveenv, to configure, display and store respectively
your network configuration details and kernel command line. In order to
TFTP a kernel, you need at a minimum to set the following:

	- ipaddr
	- gatewayip
	- netmask
	- serverip
	- loadaddr
	- dtbfile
	- dtbaddr
	- ethaddr

Your board may ship with the values for the MAC address of
the Ethernet interfaces set to the defaults compiled into the
u-boot image.  You should set the ethaddr, eth1addr and so on
as per the manufacturer assigned values, usually indicated with
a sticker on the board.

Target specifics are usually set in the "bootargs" variable, and the
kernel image is set in the "bootfile" variable. Don't forget that if you
want these values to be available after a power cycle you will need to run
the saveenv command.

Typically convenience macros exist that will create a complete bootargs
command line for the kernel based on variables that contain individual
settings.  Since these macros exist as env variables themselves, they
may or may not be present depending on who installed and configured
u-boot for the board.

The console device for the board is ttyLF0 at 115200 baud. For the DTB
address, 0x88000000 was used with success by Wind River. The load address
must be high enough to not interfere with kernel decompression. A value
of 0x82000000 was used with success for all kernels tested by Wind River.

4.1 NFS Root File System
------------------------

Example settings for the monitor (u-boot) are shown below:

nfsboot=setenv bootargs root=/dev/nfs rw nfsroot=$serverip:$rootpath \
ip=$ipaddr:$serverip:$gatewayip:$netmask:$hostname:$netdev:off \
console=$consoledev,$baudrate earlycon=ns16550a,mmio32,0x02800000;tftp $loadaddr $bootfile; \
tftp $fdtaddr $fdtfile;booti $loadaddr - $fdtaddr
ethaddr=00:04:9F:02:00:FD
loadaddr=0x82000000
fdtaddr=0x88000000
gatewayip=192.168.1.1
netmask=255.255.255.0
ipaddr=192.168.1.100
serverip=192.168.1.2
netdev=eth0
bootfile=Image
fdtfile=k3-j721e-common-proc-board.dtb
rootpath=/tftpboot/rootfs
consoledev=ttyS2
baudrate=115200

5. Creating Partitioned Images(WIC)
===================================

User can use the OpenEmbedded Image Creator to create the properly partitioned
image on a SD card. It generates partitioned images from existing OpenEmbedded
build artifacts. Please refer to the following URL for more detailed partition
information about WIC:

https://docs.yoctoproject.org/singleindex.html#creating-partitioned-images-using-wic

5.1 Build WIC image within sysfw.itb & tiboot3.bin in boot partition
--------------------------------------------------------------------

sysfw.itb & tiboot3.bin are the firmwares of TI's MCU. Because of license issue,
they aren't integrated into WRLinux.

The TI's bootloader tar package "boot-j7-evm.tar.gz" includes the two firmwares,
they can be downloaded from website:
http://software-dl.ti.com/jacinto7/esd/processor-sdk-linux-jacinto7/latest/index_FDS.html

And then add one line below to local.conf:

IMAGE_BOOT_FILES:append = " <path-to-sysfw.itb>/sysfw.itb;sysfw.itb <path-to-tiboot3.bin>/tiboot3.bin;tiboot3.bin"

After having built your project, a partitioned WIC image will be created in the
deploy folder as follows:

  path_to_your_project/build/tmp-glibc/deploy/images/ti-j72xx/wrlinux-image-<rootfs_type>-ti-j72xx.wic

There are two partitions in this WIC images, the first one is to hold the boot
images, the second is the related root file system.

5.2 Deploy the created WIC image
--------------------------------

Deploy the created WIC image into SD card(/dev/sdx) in your host machine.

   $ sudo dd if=wrlinux-image-<rootfs_type>-ti-j72xx.wic of=/dev/sdx

5.3 Boot the board from the WIC SD card
---------------------------------------

Insert the SD card into the board and select this SD card as the boot device.

Board can boot automatically by set the below uboot environment variables:

   $ setenv bootargs console=ttyS2,115200n8 earlycon=ns16550a,mmio32,0x02800000 root=/dev/mmcblk1p2 rw rootwait ip=dhcp
   $ fatload mmc 1:1 0x82000000 Image; fatload mmc 1:1 0x88000000 k3-j721e-common-proc-board.dtb; booti 0x82000000 - 0x88000000

6. Features
===========

Before using the features below, it is recommended that you first add
WRTEMPLATE to your build local.conf to add series tools (Such as: can/audio/ufs).

Simply add line as follows to ${buildprj}/build/conf/local.conf:
	WRTEMPLATE = "feature/bsp-extras"

And it is recommended to refer to the "Foundational Components" of the sdk
release note "Processor SDK Linux for J721e" from the TI web.

6.1 CAN
-------

6.1.1 Verify
------------

Detail verification commands as below:

	# ip link set can0 up type can bitrate 125000 dbitrate 5000000 fd on
	# ip link set can1 up type can bitrate 125000 dbitrate 5000000 fd on
	# candump can0 &
	# cansend can1 5A1#11.22.33.44.55.66.77.88
	# ip -d -s link show can0
	# ip -d -s link show can1

If can0 dumps data from can1, CAN feature works fine.

6.2 IPC
-------

The J7 SOC has integrated ARM Cortex A72 and others cores like: Cortex-R5F cores, C71x and C66X DSPs.
Through the CPSW9g virtual MAC, Cortex A72 can communicate with the remote cores using rpmsg.

In order to verify the IPC feature, need to build wrlinux with below steps:

Add line as follows to ${buildprj}/build/conf/local.conf:

	KERNEL_FEATURES:append = " bsp/ti-j7xxx/ti-j7xxx-remoteproc.scc"

Built and install them:

	# bitbake wrlinux-image-xxx

Initialize all the available remote cores in the u-boot:
	$ rproc init;run boot_rprocs_mmc;

Then booting the system, the cores firmwares will be auto-download and get the
response.

By default, the kernel config "CONFIG_SAMPLE_RPMSG_CLIENT" is enabled, the rpmsg
client sample is available to simple test the IPC feature. In the booting stage
it demonstrates how to communicate with an AMP-configured remote processor
over the rpmsg bus.

Note:
Since both the u-boot and linux kernel download the firmwares from the
rootfs directory "/lib/firmware", so NFS is not applicable to this case.
Only WIC mode works fine.

6.3 Watchdog
------------

In order to use watchdog, the configuration switch on J721EX-PM2-SOM board should be set with:

SW2.1=OFF, SW2.2=ON, SW3.1=ON, SW3.2=OFF

6.3.1 Usage and verification
----------------------------

        # echo 1 > /dev/watchdog

6.4 UFS
-------

6.4.1 Usage and verification
----------------------------

Running the commands in u-boot to scan the Universal Flash Subsystem (UFS)
devices.
	=> ufs init
	=> scsi scan

If no relevant device was found, please refer to the following link for more
information:
	https://e2e.ti.com/support/processors/f/791/t/922975

6.5 Graphics
------------

J721E device is enabled with 3D graphics accelerator based on the Rogue 8XE series
from Imagination Technologies Inc. 3D-graphics apps call userspace libraries to drive
the GPU directly by the graphics driver.

Due to the software license terms, we are not permitted to redistribute these components.
Due to this, we are unable to support the components (ti-img-rogue-driver, img-pvr-sdk and
ti-img-rogue-umlibs) or directly enable them (ti-img-rogue-driver, img-pvr-sdk and
ti-img-rogue-umlibs) within Wind River Linux. Please contact your silicon vendor if you have
any questions about the software license terms.

As below is the step how to build a graphics enabled system and verify the graphics feature:

6.5.1 Build Image
-----------------

  1) set BB_NO_NETWORK as '0' in <path-of-project>/build/conf/local.conf file.

  2) Launch bitbake to build an image with graphics support

     $ cd path_to_your_project
     $ . ./environment-setup-x86_64-wrlinuxsdk-linux
     $ . ./oe-init-build-env
     $ cat << _EOF >> conf/local.conf
DISTRO ?= "wrlinux-graphics"
MACHINE_FEATURES += " gpu"
CUSTOMER_RECIPES:wr-ti-j7xxx += 'img-pvr-sdk'
CUSTOMER_RECIPES:meta-ti-bsp += 'ti-img-rogue-umlibs ti-img-rogue-driver mesa-pvr'
_EOF
     $ bitbake wrlinux-image-std-sato

6.6 Video
---------

J721E has the following hardware accelerators:

Multi-Standard HD Video Decoder (DECODER) based on D5520MP2 from Imagination
Technologies for accelerating multimedia decode.
Multi-Standard HD Video Encoder (ENCODER) based on VXE384MP2 from Imagination
Technologies for accelerating multimedia encode.

The Linux Kernel Drivers has integrated the Video Decoder and Encoder as module by default.
Because of the license issue, you can manually build the Image as below to
integrate the gstreamer related packages:

6.6.1 Build Image
-----------------

  1) set BB_NO_NETWORK as '0' in ${buildprj}/build/conf/local.conf file.

  2) Add line as follows to ${buildprj}/build/conf/local.conf:
     $ cat << _EOF >> conf/local.conf
CUSTOMER_RECIPES:openembedded-layer += 'faad2'
LICENSE_FLAGS_ACCEPTED += "commercial"
IMAGE_INSTALL:append:ti-j7 = ' gstreamer1.0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-libav'
_EOF

  3) bitbake wrlinux-image-xxx

6.6.2 Verify Multimedia feature
-------------------------------

An example to test with GStreamer Pipelines on target board:

	$ gst-launch-1.0 filesrc location=/<path_to_file>  ! qtdemux ! h264parse ! v4l2h264dec ! videoconvert ! v4l2h264enc ! filesink location=/<path_to_file>

6.7 Build U-Boot
----------------

By default, the u-boot image is compiled and installed. If you want u-boot to be manually
compiled separately, use the following command：

	# bitbake u-boot-ti-staging
